name: Continuous Integration & Deployment
on: [push]

jobs:
  install-deps:
    name: Install (Node ${{ matrix.node }}) ‚ö°Ô∏è
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ "16", "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Cache Yarn dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Setup Node üìö
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Yarn install ‚ö°Ô∏è
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: yarn install

  cli-build:
    name: "CLI üíªÔ∏è - build üîß"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node:  [ "16", "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Build üîß
        run: |
          cd cli/
          yarn build --force

  cli-lint:
    name: "CLI üíªÔ∏è - lint üìè"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node: [ "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Lint üìè
        run: |
          cd cli/
          yarn lint

  lib-build:
    name: "Lib üìö - build & test üîß"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node: [ "16", "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Build & test üîß
        run: |
          cd lib/
          yarn build
          yarn test -v --serial

  lib-lint:
    name: "Lib üìö - lint üìè"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node: [ "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Lint üìè
        run: |
          cd lib/
          yarn lint

  web-lint:
    name: "Web üåê - lint üìè"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node: [ "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Lint üìè
        run: |
          cd web/
          yarn lint

  build-docker:
    name: "Build docker"
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        node:  [ "18" ]
      fail-fast: false
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Check version strings
        run: |
          # version strings should be only numbers and dots
          # and not contain '-dev' for example
          valid=true
          if ! jq -e '.version| test("^[0-9.]+$")' cli/package.json >/dev/null; then
              echo "CLI package has invalid version string"
              valid=false
          fi
          if ! jq -e '.dependencies."@dodona/dolos-web" | test("^[0-9.]+$")' cli/package.json >/dev/null; then
              echo "CLI dependency dolos-web has invalid version string"
              valid=false
          fi
          if ! jq -e '.dependencies."@dodona/dolos-lib" | test("^[0-9.]+$")' cli/package.json >/dev/null; then
              echo "CLI dependency dolos-lib has invalid version string"
              valid=false
          fi
          if ! jq -e '.version | test("^[0-9.]+$")' web/package.json >/dev/null; then
              echo "Web package has invalid version string"
              valid=false
          fi
          if ! jq -e '.version | test("^[0-9.]+$")' lib/package.json >/dev/null; then
              echo "Lib package has invalid version string"
              valid=false
          fi
          if ! $valid; then
              exit 1
          fi

      - name: Setup Node üìö
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Fetch Dependencies ‚ö°Ô∏è
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package.json') }}

      - name: Check if cache was hit üîé
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          echo "Should have hit cache"
          false

      - name: Build lib üîß
        run: |
          cd lib/
          yarn build --force

      - name: Build CLI üîß
        run: |
          cd cli/
          yarn build --force

      - name: Build web üîß
        run: |
          cd web/
          yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_UPLOADER_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_UPLOADER_SECRET }}
          aws-region: us-east-1

      - name: Get Current Branch
        id: get-branch
        uses: codio/get-branch-name-github-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: app Docker build
        run: docker build -t tmp_app_img --file ./docker-codio/Dockerfile .

      - name: push app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: codio/dolos
          IMAGE_TAG: ${{ github.sha }}
          BRANCH: ${{ steps.get-branch.outputs.branch }}
        run: |
          docker tag tmp_app_img $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag tmp_app_img $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH

      - name: push app dev version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: codio/dolos
        run: |
          docker tag tmp_app_img $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev
        if: ${{ steps.get-branch.outputs.branch == 'master' }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Slack
        uses: codio/codio-slack-action@master
        with:
          slack_hook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: "<https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{ github.workflow }} build-push> for ${{ github.repository }} by ${{ github.actor }} has ${{ job.status }} on branch ${{ github.ref }}"
          success: ${{ job.status }}
        if: always()
